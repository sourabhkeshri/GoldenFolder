Input: N = 6
arr = {1, 2, 3, 6, 5, 4}
Output: {1, 2, 4, 3, 5, 6}
Explaination: The next permutation of the 
given array is {1, 2, 4, 3, 5, 6}.
Example 2:

Input: N = 3
arr = {3, 2, 1}
Output: {1, 2, 3}
Explaination: As arr[] is the last 
permutation. So, the next permutation 
is the lowest one.
---------------------------------------------
traverse from back
find idx1 : a[i]<a[i+1]
find idx2 : a[idx1]<a[i]
swap(a[idx1],a[idx2])
reverse(idx1+1 to last) if last permutation then only reverse no need to do steps 2 and 3
-------------------
class Solution{
    static List<Integer> nextPermutation(int n, int a[]){
        ArrayList<Integer> al=new ArrayList<>();
        if(a.length==1){
             al.add(a[0]);
             return al;
        }
        int i=a.length-2;
        while(i>=0 && a[i]>=a[i+1])i--;
        if(i>=0){
            int j=a.length-1;
            while(a[i]>=a[j] ) j--;
            swap(a,i,j);
        }
        reverse(a,i+1,a.length-1);
        for(int aa:a) al.add(aa);
        return al;
    }
    
    public static void reverse(int[]a,int l,int r){
        while(l<r) swap(a,l++,r--);
    }
    
    public static void swap(int []a,int idx1,int idx2){
        int tt=a[idx1];
            a[idx1]=a[idx2];
            a[idx2]=tt;
        
    }
}